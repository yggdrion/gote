name: Check Vendor Library Updates

on:
  schedule:
    # Run weekly on Mondays at 9:00 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch: # Allow manual trigger

jobs:
  check-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install -g semver

      - name: Check for vendor library updates
        id: check-updates
        run: |
          # Read current versions
          MARKED_VERSION=$(grep "marked.js=" static/vendor/versions.txt | cut -d'=' -f2)
          HIGHLIGHT_VERSION=$(grep "highlight.js=" static/vendor/versions.txt | cut -d'=' -f2)

          echo "Current marked.js version: $MARKED_VERSION"
          echo "Current highlight.js version: $HIGHLIGHT_VERSION"

          # Check latest versions
          MARKED_LATEST=$(curl -s https://api.github.com/repos/markedjs/marked/releases/latest | jq -r .tag_name | sed 's/^v//')
          HIGHLIGHT_LATEST=$(curl -s https://api.github.com/repos/highlightjs/highlight.js/releases/latest | jq -r .tag_name | sed 's/^v//')

          echo "Latest marked.js version: $MARKED_LATEST"
          echo "Latest highlight.js version: $HIGHLIGHT_LATEST"

          # Compare versions and set outputs
          MARKED_UPDATE_NEEDED=false
          HIGHLIGHT_UPDATE_NEEDED=false

          if [ "$MARKED_VERSION" != "$MARKED_LATEST" ]; then
            if npx semver -r ">$MARKED_VERSION" "$MARKED_LATEST" > /dev/null 2>&1; then
              MARKED_UPDATE_NEEDED=true
            fi
          fi

          if [ "$HIGHLIGHT_VERSION" != "$HIGHLIGHT_LATEST" ]; then
            if npx semver -r ">$HIGHLIGHT_VERSION" "$HIGHLIGHT_LATEST" > /dev/null 2>&1; then
              HIGHLIGHT_UPDATE_NEEDED=true
            fi
          fi

          echo "marked_update_needed=$MARKED_UPDATE_NEEDED" >> $GITHUB_OUTPUT
          echo "highlight_update_needed=$HIGHLIGHT_UPDATE_NEEDED" >> $GITHUB_OUTPUT
          echo "marked_latest=$MARKED_LATEST" >> $GITHUB_OUTPUT
          echo "highlight_latest=$HIGHLIGHT_LATEST" >> $GITHUB_OUTPUT
          echo "marked_current=$MARKED_VERSION" >> $GITHUB_OUTPUT
          echo "highlight_current=$HIGHLIGHT_VERSION" >> $GITHUB_OUTPUT

      - name: Download updated libraries
        if: steps.check-updates.outputs.marked_update_needed == 'true' || steps.check-updates.outputs.highlight_update_needed == 'true'
        run: |
          cd static/vendor

          # Backup current files
          cp marked.min.js marked.min.js.backup
          cp highlight.min.js highlight.min.js.backup
          cp github.min.css github.min.css.backup

          # Download updates if needed
          if [ "${{ steps.check-updates.outputs.marked_update_needed }}" == "true" ]; then
            echo "Downloading marked.js ${{ steps.check-updates.outputs.marked_latest }}"
            curl -f -o marked.min.js "https://cdn.jsdelivr.net/npm/marked@${{ steps.check-updates.outputs.marked_latest }}/marked.min.js"
          fi

          if [ "${{ steps.check-updates.outputs.highlight_update_needed }}" == "true" ]; then
            echo "Downloading highlight.js ${{ steps.check-updates.outputs.highlight_latest }}"
            curl -f -o highlight.min.js "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/${{ steps.check-updates.outputs.highlight_latest }}/highlight.min.js"
            curl -f -o github.min.css "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/${{ steps.check-updates.outputs.highlight_latest }}/styles/github.min.css"
          fi

      - name: Update versions file
        if: steps.check-updates.outputs.marked_update_needed == 'true' || steps.check-updates.outputs.highlight_update_needed == 'true'
        run: |
          # Update versions.txt
          if [ "${{ steps.check-updates.outputs.marked_update_needed }}" == "true" ]; then
            sed -i "s/marked.js=.*/marked.js=${{ steps.check-updates.outputs.marked_latest }}/" static/vendor/versions.txt
          fi

          if [ "${{ steps.check-updates.outputs.highlight_update_needed }}" == "true" ]; then
            sed -i "s/highlight.js=.*/highlight.js=${{ steps.check-updates.outputs.highlight_latest }}/" static/vendor/versions.txt
          fi

          # Update last checked date
          sed -i "s/last_checked=.*/last_checked=$(date +%Y-%m-%d)/" static/vendor/versions.txt

      - name: Test updated libraries
        if: steps.check-updates.outputs.marked_update_needed == 'true' || steps.check-updates.outputs.highlight_update_needed == 'true'
        run: |
          # Basic smoke test - check if files are valid JavaScript/CSS
          cd static/vendor

          if [ "${{ steps.check-updates.outputs.marked_update_needed }}" == "true" ]; then
            # Check if marked.js file is valid
            if ! node -c marked.min.js; then
              echo "ERROR: Downloaded marked.js is not valid JavaScript"
              mv marked.min.js.backup marked.min.js
              exit 1
            fi
            echo "✓ marked.js validation passed"
          fi

          if [ "${{ steps.check-updates.outputs.highlight_update_needed }}" == "true" ]; then
            # Check if highlight.js file is valid
            if ! node -c highlight.min.js; then
              echo "ERROR: Downloaded highlight.js is not valid JavaScript"
              mv highlight.min.js.backup highlight.min.js
              mv github.min.css.backup github.min.css
              exit 1
            fi
            echo "✓ highlight.js validation passed"
          fi

          # Remove backup files if tests passed
          rm -f *.backup

      - name: Create Pull Request
        if: steps.check-updates.outputs.marked_update_needed == 'true' || steps.check-updates.outputs.highlight_update_needed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            Update vendor libraries

            - marked.js: ${{ steps.check-updates.outputs.marked_current }} → ${{ steps.check-updates.outputs.marked_latest }}
            - highlight.js: ${{ steps.check-updates.outputs.highlight_current }} → ${{ steps.check-updates.outputs.highlight_latest }}
          title: "Update vendor libraries"
          body: |
            ## Vendor Library Updates

            This PR updates the following vendor libraries:

            ### Changes
            ${{ steps.check-updates.outputs.marked_update_needed == 'true' && format('- **marked.js**: {0} → {1}', steps.check-updates.outputs.marked_current, steps.check-updates.outputs.marked_latest) || '' }}
            ${{ steps.check-updates.outputs.highlight_update_needed == 'true' && format('- **highlight.js**: {0} → {1}', steps.check-updates.outputs.highlight_current, steps.check-updates.outputs.highlight_latest) || '' }}

            ### Testing
            - [x] Downloaded files validated as proper JavaScript/CSS
            - [ ] Manual testing recommended before merge

            ### Links
            ${{ steps.check-updates.outputs.marked_update_needed == 'true' && format('- [marked.js {0} release notes](https://github.com/markedjs/marked/releases/tag/v{1})', steps.check-updates.outputs.marked_latest, steps.check-updates.outputs.marked_latest) || '' }}
            ${{ steps.check-updates.outputs.highlight_update_needed == 'true' && format('- [highlight.js {0} release notes](https://github.com/highlightjs/highlight.js/releases/tag/v{1})', steps.check-updates.outputs.highlight_latest, steps.check-updates.outputs.highlight_latest) || '' }}

            ---
            *This PR was automatically created by the vendor update workflow.*
          branch: vendor-updates
          delete-branch: true

      - name: Create Issue if no updates needed
        if: steps.check-updates.outputs.marked_update_needed == 'false' && steps.check-updates.outputs.highlight_update_needed == 'false'
        run: |
          echo "No vendor library updates available."
          echo "Current versions are up to date:"
          echo "- marked.js: ${{ steps.check-updates.outputs.marked_current }}"
          echo "- highlight.js: ${{ steps.check-updates.outputs.highlight_current }}"
