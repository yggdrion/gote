name: 📦 Build - Release

on:
  workflow_dispatch:

concurrency:
  group: ${{ githu    steps:
      - name: Checkout code 🌿
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.1

      - name: Set up Go 🐹
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v5.1.0
        with:
          go-version: "1.25"

      - name: Set up Node.js 🟢
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v4.1.0
  cancel-in-progress: false

jobs:
  setup:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      issues: read
      pull-requests: read
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_build: ${{ steps.check_commit.outputs.should_build }}
    steps:
      - name: Checkout code 🌿
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.1
        with:
          fetch-depth: 0

      - name: Set up Node.js 🟢
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v4.2.1
        with:
          node-version: 22

      - name: Install semantic-release and plugins 📦
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits semantic-release-export-data

      - name: Get next version from semantic-release 🏷️
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run || true
          VERSION=$(npx semantic-release --dry-run 2>&1 | grep -oP 'Skip v\K[0-9]+\.[0-9]+\.[0-9]+')
          echo "Detected version: $VERSION"
          if [ -z "$VERSION" ]; then
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Abort if not latest commit on main ❌
        id: check_commit
        run: |
          REMOTE_SHA=$(git ls-remote origin refs/heads/main | cut -f1)
          echo "Current SHA: $GITHUB_SHA"
          echo "Remote SHA:  $REMOTE_SHA"
          if [ "$GITHUB_SHA" != "$REMOTE_SHA" ]; then
            echo "This workflow is not running on the latest commit of main. Exiting early."
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  # Build Wails applications for multiple platforms
  build:
    needs: setup
    if: needs.setup.outputs.should_build == 'true'
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            platform: windows/amd64
            binary_name: gote.exe
            artifact_name: gote-windows-amd64.exe
          # macOS builds
          - os: macos-latest
            platform: darwin/amd64
            binary_name: gote
            artifact_name: gote-macos-amd64.app
          - os: macos-latest
            platform: darwin/arm64
            binary_name: gote
            artifact_name: gote-macos-arm64.app
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code 🌿
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.1

      - name: Set up Go 🐹
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v5.1.0
        with:
          go-version: "1.25"

      - name: Set up Node.js �
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: 22

      - name: Install Wails 📦
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install frontend dependencies 📦
        run: |
          cd frontend
          npm install

      - name: Build Wails app 🔨
        run: |
          wails build -platform ${{ matrix.platform }} -o ${{ matrix.binary_name }}

      - name: Package macOS app (macOS only) 📦
        if: matrix.os == 'macos-latest'
        run: |
          cd build/bin
          zip -r ${{ matrix.artifact_name }}.zip ${{ matrix.binary_name }}.app
          mv ${{ matrix.artifact_name }}.zip ../

      - name: Upload build artifacts 📤
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 v4.6.1
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            build/bin/${{ matrix.binary_name }}${{ matrix.os == 'macos-latest' && '.app' || '' }}
            build/${{ matrix.artifact_name }}.zip
          if-no-files-found: ignore

  # Release job
  release:
    needs: [setup, build]
    if: needs.setup.outputs.should_build == 'true'
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      issues: read
      pull-requests: read
    steps:
      - name: Checkout code 🌿
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.1
        with:
          fetch-depth: 0

      - name: Set up Node.js 🟢
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v3.9.1
        with:
          node-version: 22

      - name: Install semantic-release and plugins 📦
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits semantic-release-export-data

      - name: Download build artifacts 📥
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 v4.6.1
        with:
          path: ./artifacts

      - name: Prepare release assets 📦
        run: |
          mkdir -p release-assets

          # Debug: List all artifacts with full structure
          echo "=== Available artifacts directory structure ==="
          find artifacts -type f -ls
          echo "=== Detailed listing ==="
          ls -la artifacts/
          for dir in artifacts/*/; do
            echo "Contents of $dir:"
            ls -la "$dir"
          done

          # Copy Windows binaries
          if [ -f artifacts/gote-windows-amd64.exe/bin/gote.exe ]; then
            echo "Found Windows binary, copying..."
            cp artifacts/gote-windows-amd64.exe/bin/gote.exe release-assets/gote-windows-amd64.exe
          else
            echo "Windows binary not found at artifacts/gote-windows-amd64.exe/bin/gote.exe"
            echo "Checking alternative paths..."
            find artifacts -name "*.exe" -type f
          fi

          # Copy macOS apps
          for arch in amd64 arm64; do
            if [ -f artifacts/gote-macos-${arch}.app/gote-macos-${arch}.app.zip ]; then
              echo "Found macOS ${arch} zip, copying..."
              cp artifacts/gote-macos-${arch}.app/gote-macos-${arch}.app.zip release-assets/
            elif [ -d artifacts/gote-macos-${arch}.app/gote.app ]; then
              echo "Found macOS ${arch} app directory, zipping..."
              cd artifacts/gote-macos-${arch}.app
              zip -r ../../release-assets/gote-macos-${arch}.app.zip gote.app
              cd ../..
            else
              echo "macOS ${arch} binary not found"
            fi
          done

          # List what we have
          echo "=== Final release assets ==="
          ls -la release-assets/

      - name: Run semantic-release 🚀
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Pre-release check ==="
          ls -la release-assets/
          echo "=== Files to be uploaded ==="
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              echo "File: $file ($(stat -c%s "$file") bytes)"
            fi
          done
          echo "=== Running semantic-release ==="
          semantic-release --debug

      - name: Update Homebrew Tap 🍺
        if: steps.release.conclusion == 'success'
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          # Get the released version
          VERSION="${{ needs.setup.outputs.version }}"
          echo "Updating Homebrew tap for version $VERSION"

          # Clone the homebrew tap repository using the fine-grained token
          git clone https://x-access-token:${{ secrets.HOMEBREW_TAP_TOKEN }}@github.com/yggdrion/homebrew-tap.git tap-repo
          cd tap-repo

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Wait a moment for the release assets to be fully available
          echo "Waiting for release assets to be available..."
          sleep 30

          # Calculate SHA256 checksums for the release assets with retry logic
          for i in {1..5}; do
            echo "Attempt $i to download and calculate checksums..."
            AMD64_SHA=$(curl -sL "https://github.com/yggdrion/gote/releases/download/v${VERSION}/gote-macos-amd64.app.zip" | shasum -a 256 | cut -d' ' -f1)
            ARM64_SHA=$(curl -sL "https://github.com/yggdrion/gote/releases/download/v${VERSION}/gote-macos-arm64.app.zip" | shasum -a 256 | cut -d' ' -f1)
            
            if [[ -n "$AMD64_SHA" && -n "$ARM64_SHA" && "$AMD64_SHA" != "da39a3ee5e6b4b0d3255bfef95601890afd80709" && "$ARM64_SHA" != "da39a3ee5e6b4b0d3255bfef95601890afd80709" ]]; then
              echo "Successfully calculated checksums:"
              echo "AMD64: $AMD64_SHA"
              echo "ARM64: $ARM64_SHA"
              break
            else
              echo "Failed to get valid checksums, retrying in 10 seconds..."
              sleep 10
            fi
            
            if [[ $i -eq 5 ]]; then
              echo "Failed to get checksums after 5 attempts"
              exit 1
            fi
          done

          # Update the cask formula
          cat > Casks/gote.rb << EOF
          cask "gote" do
            version "${VERSION}"
            
            on_intel do
              url "https://github.com/yggdrion/gote/releases/download/v#{version}/gote-macos-amd64.app.zip"
              sha256 "${AMD64_SHA}"
            end
            
            on_arm do
              url "https://github.com/yggdrion/gote/releases/download/v#{version}/gote-macos-arm64.app.zip"
              sha256 "${ARM64_SHA}"
            end
            
            name "Gote"
            desc "Secure note-taking application built with Wails"
            homepage "https://github.com/yggdrion/gote"

            livecheck do
              url :url
              strategy :github_latest
            end

            auto_updates false

            app "gote.app"

            zap trash: [
              "~/Library/Application Support/gote",
              "~/Library/Caches/gote",
              "~/Library/Logs/gote",
              "~/Library/Preferences/com.gote.plist",
              "~/Library/Saved Application State/com.gote.savedState",
            ]
          end
          EOF

          # Commit and push the changes
          git add Casks/gote.rb
          git commit -m "chore: update gote to v${VERSION}

          - Updated from automated release workflow
          - AMD64 SHA256: ${AMD64_SHA}
          - ARM64 SHA256: ${ARM64_SHA}"
          git push
