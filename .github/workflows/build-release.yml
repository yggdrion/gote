name: üì¶ Build Wails App - Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  setup:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_build: ${{ steps.check_commit.outputs.should_build }}
    steps:
      - name: Checkout code üåø
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Set up Node.js üü¢
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20

      - name: Install semantic-release and plugins üì¶
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits semantic-release-export-data

      - name: Get next version from semantic-release üè∑Ô∏è
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run || true
          VERSION=$(npx semantic-release --dry-run 2>&1 | grep -oP 'Skip v\K[0-9]+\.[0-9]+\.[0-9]+')
          echo "Detected version: $VERSION"
          if [ -z "$VERSION" ]; then
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Abort if not latest commit on main ‚ùå
        id: check_commit
        run: |
          REMOTE_SHA=$(git ls-remote origin refs/heads/main | cut -f1)
          echo "Current SHA: $GITHUB_SHA"
          echo "Remote SHA:  $REMOTE_SHA"
          if [ "$GITHUB_SHA" != "$REMOTE_SHA" ]; then
            echo "This workflow is not running on the latest commit of main. Exiting early."
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  # Build Wails applications for multiple platforms
  build:
    needs: setup
    if: needs.setup.outputs.should_build == 'true'
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            platform: windows/amd64
            binary_name: gote.exe
            artifact_name: gote-windows-amd64.exe
          # macOS builds
          - os: macos-latest
            platform: darwin/amd64
            binary_name: gote
            artifact_name: gote-macos-amd64.app
          - os: macos-latest
            platform: darwin/arm64
            binary_name: gote
            artifact_name: gote-macos-arm64.app
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code üåø
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up Go üêπ
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version: "1.24"

      - name: Set up Node.js üì¶
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 22

      - name: Install system dependencies (Linux only) üêß
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update

          # Install base dependencies for all Linux builds
          sudo apt-get install -y build-essential pkg-config

          # Install AMD64 GUI libraries for AMD64 builds
          if [[ "${{ matrix.platform }}" == "linux/amd64" ]]; then
            if ! sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev; then
              sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev
              # Create symlink for webkit2gtk-4.0 to point to 4.1
              sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc || true
              sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-web-extension-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-web-extension-4.0.pc || true
            fi
          fi

          # Install ARM64 cross-compilation tools for ARM64 builds
          if [[ "${{ matrix.platform }}" == "linux/arm64" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Install Wails üì¶
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install frontend dependencies üì¶
        run: |
          cd frontend
          npm install

      - name: Build Wails app üî®
        run: |
          # Set up cross-compilation environment for ARM64 Linux builds
          if [[ "${{ matrix.platform }}" == "linux/arm64" ]]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export CGO_ENABLED=0
            export GOOS=linux
            export GOARCH=arm64
          fi
          wails build -platform ${{ matrix.platform }} -o ${{ matrix.binary_name }}

      - name: Package macOS app (macOS only) üì¶
        if: matrix.os == 'macos-latest'
        run: |
          cd build/bin
          zip -r ${{ matrix.artifact_name }}.zip ${{ matrix.binary_name }}.app
          mv ${{ matrix.artifact_name }}.zip ../

      - name: Upload build artifacts üì§
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            build/bin/${{ matrix.binary_name }}${{ matrix.os == 'macos-latest' && '.app' || '' }}
            build/${{ matrix.artifact_name }}.zip
          if-no-files-found: ignore

  # Release job
  release:
    needs: [setup, build]
    if: needs.setup.outputs.should_build == 'true'
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Checkout code üåø
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Set up Node.js üü¢
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20

      - name: Install semantic-release and plugins üì¶
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits semantic-release-export-data

      - name: Download build artifacts üì•
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          path: ./artifacts

      - name: Prepare release assets üì¶
        run: |
          mkdir -p release-assets

          # Copy Linux binaries
          if [ -f artifacts/gote-linux-amd64/gote ]; then
            cp artifacts/gote-linux-amd64/gote release-assets/gote-linux-amd64
          fi
          if [ -f artifacts/gote-linux-arm64/gote ]; then
            cp artifacts/gote-linux-arm64/gote release-assets/gote-linux-arm64
          fi

          # Copy Windows binaries
          if [ -f artifacts/gote-windows-amd64.exe/gote.exe ]; then
            cp artifacts/gote-windows-amd64.exe/gote.exe release-assets/gote-windows-amd64.exe
          fi
          if [ -f artifacts/gote-windows-arm64.exe/gote.exe ]; then
            cp artifacts/gote-windows-arm64.exe/gote.exe release-assets/gote-windows-arm64.exe
          fi

          # Copy macOS apps
          for arch in amd64 arm64; do
            if [ -f artifacts/gote-macos-${arch}.app/gote-macos-${arch}.app.zip ]; then
              cp artifacts/gote-macos-${arch}.app/gote-macos-${arch}.app.zip release-assets/
            elif [ -d artifacts/gote-macos-${arch}.app/gote.app ]; then
              cd artifacts/gote-macos-${arch}.app
              zip -r ../../release-assets/gote-macos-${arch}.app.zip gote.app
              cd ../..
            fi
          done

          # List what we have
          ls -la release-assets/

      - name: Run semantic-release üöÄ
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release
